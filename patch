diff --git a/hazelcast/src/main/java/com/hazelcast/monitor/LocalWanPublisherStats.java b/hazelcast/src/main/java/com/hazelcast/monitor/LocalWanPublisherStats.java
index 7defd78..15cfe39 100644
--- a/hazelcast/src/main/java/com/hazelcast/monitor/LocalWanPublisherStats.java
+++ b/hazelcast/src/main/java/com/hazelcast/monitor/LocalWanPublisherStats.java
@@ -29,18 +29,18 @@ public interface LocalWanPublisherStats extends JsonSerializable {
     boolean isConnected();
 
     /**
-     * Returns the number of outbound records from this member per second
+     * Returns the total number of published events from this member
      *
-     * @return number of outbound records from this member per second
+     * @return number of total published events from this member
      */
-    int getOutboundRecsSec();
+    long getTotalPublishedEventCount();
 
     /**
-     * Returns the latency of outbound records from this member by millisecond.
+     * Returns the total latency of published wan events from this member by millisecond.
      *
      * @return latency of outbound records from this member by millisecond.
      */
-    int getOutboundLatencyMs();
+    long getTotalPublishLatency();
 
     /**
      * Returns the outbound queue size on this member
diff --git a/hazelcast/src/main/java/com/hazelcast/monitor/impl/LocalWanPublisherStatsImpl.java b/hazelcast/src/main/java/com/hazelcast/monitor/impl/LocalWanPublisherStatsImpl.java
index d9274d0..821884b 100644
--- a/hazelcast/src/main/java/com/hazelcast/monitor/impl/LocalWanPublisherStatsImpl.java
+++ b/hazelcast/src/main/java/com/hazelcast/monitor/impl/LocalWanPublisherStatsImpl.java
@@ -20,15 +20,24 @@ package com.hazelcast.monitor.impl;
 import com.eclipsesource.json.JsonObject;
 import com.hazelcast.monitor.LocalWanPublisherStats;
 
+import java.util.concurrent.atomic.AtomicLongFieldUpdater;
+
 import static com.hazelcast.util.JsonUtil.getBoolean;
 import static com.hazelcast.util.JsonUtil.getInt;
+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;
 
 public class LocalWanPublisherStatsImpl implements LocalWanPublisherStats {
+
+    private static final AtomicLongFieldUpdater<LocalWanPublisherStatsImpl> TOTAL_PUBLISH_LATENCY =
+            newUpdater(LocalWanPublisherStatsImpl.class, "totalPublishLatency");
+    private static final AtomicLongFieldUpdater<LocalWanPublisherStatsImpl> TOTAL_PUBLISHED_EVENT_COUNT =
+            newUpdater(LocalWanPublisherStatsImpl.class, "totalPublishedEventCount");
+
     private volatile boolean connected;
-    private volatile int outboundRecsSec;
-    private volatile int outboundLatencyMs;
-    private volatile int outboundQueueSize;
     private volatile boolean paused;
+    private volatile int outboundQueueSize;
+    private volatile long totalPublishLatency;
+    private volatile long totalPublishedEventCount;
 
     @Override
     public boolean isConnected() {
@@ -40,24 +49,6 @@ public class LocalWanPublisherStatsImpl implements LocalWanPublisherStats {
     }
 
     @Override
-    public int getOutboundRecsSec() {
-        return outboundRecsSec;
-    }
-
-    public void setOutboundRecsSec(int outboundRecsSec) {
-        this.outboundRecsSec = outboundRecsSec;
-    }
-
-    @Override
-    public int getOutboundLatencyMs() {
-        return outboundLatencyMs;
-    }
-
-    public void setOutboundLatencyMs(int outboundLatencyMs) {
-        this.outboundLatencyMs = outboundLatencyMs;
-    }
-
-    @Override
     public int getOutboundQueueSize() {
         return outboundQueueSize;
     }
@@ -76,11 +67,26 @@ public class LocalWanPublisherStatsImpl implements LocalWanPublisherStats {
     }
 
     @Override
+    public long getTotalPublishLatency() {
+        return totalPublishLatency;
+    }
+
+    @Override
+    public long getTotalPublishedEventCount() {
+        return totalPublishedEventCount;
+    }
+
+    public void incrementPublishedEventCount(long latency) {
+        TOTAL_PUBLISHED_EVENT_COUNT.incrementAndGet(this);
+        TOTAL_PUBLISH_LATENCY.addAndGet(this, latency);
+    }
+
+    @Override
     public JsonObject toJson() {
         JsonObject root = new JsonObject();
         root.add("isConnected", connected);
-        root.add("outboundRecsSec", outboundRecsSec);
-        root.add("outboundLatencyMs", outboundLatencyMs);
+        root.add("totalPublishLatencies", totalPublishLatency);
+        root.add("totalPublishedEventCount", totalPublishedEventCount);
         root.add("outboundQueueSize", outboundQueueSize);
         root.add("paused", paused);
         return root;
@@ -89,8 +95,8 @@ public class LocalWanPublisherStatsImpl implements LocalWanPublisherStats {
     @Override
     public void fromJson(JsonObject json) {
         connected = getBoolean(json, "isConnected", false);
-        outboundRecsSec = getInt(json, "outboundRecsSec", -1);
-        outboundLatencyMs = getInt(json, "outboundLatencyMs", -1);
+        totalPublishLatency = getInt(json, "totalPublishLatencies", -1);
+        totalPublishedEventCount = getInt(json, "totalPublishedEventCount", -1);
         outboundQueueSize = getInt(json, "outboundQueueSize", -1);
         paused = getBoolean(json, "paused");
     }
@@ -99,8 +105,8 @@ public class LocalWanPublisherStatsImpl implements LocalWanPublisherStats {
     public String toString() {
         return "LocalPublisherStatsImpl{"
                 + "connected=" + connected
-                + ", outboundRecsSec=" + outboundRecsSec
-                + ", outboundLatencyMs=" + outboundLatencyMs
+                + ", totalPublishLatency=" + totalPublishLatency
+                + ", totalPublishedEventCount=" + totalPublishedEventCount
                 + ", outboundQueueSize=" + outboundQueueSize
                 + ", paused=" + paused
                 + '}';
diff --git a/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalWanPublisherStatsTest.java b/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalWanPublisherStatsTest.java
index 0ffc7a8..4747c17 100644
--- a/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalWanPublisherStatsTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalWanPublisherStatsTest.java
@@ -19,9 +19,8 @@ public class LocalWanPublisherStatsTest {
     public void testSerialization() {
         LocalWanPublisherStatsImpl localWanPublisherStats = new LocalWanPublisherStatsImpl();
         localWanPublisherStats.setConnected(true);
-        localWanPublisherStats.setOutboundRecsSec(15);
         localWanPublisherStats.setOutboundQueueSize(100);
-        localWanPublisherStats.setOutboundLatencyMs(13);
+        localWanPublisherStats.incrementPublishedEventCount(10);
 
         JsonObject serialized = localWanPublisherStats.toJson();
 
@@ -29,9 +28,9 @@ public class LocalWanPublisherStatsTest {
         deserialized.fromJson(serialized);
 
         assertEquals(localWanPublisherStats.isConnected(), deserialized.isConnected());
-        assertEquals(localWanPublisherStats.getOutboundLatencyMs(), deserialized.getOutboundLatencyMs());
+        assertEquals(localWanPublisherStats.getTotalPublishedEventCount(), deserialized.getTotalPublishedEventCount());
         assertEquals(localWanPublisherStats.getOutboundQueueSize(), deserialized.getOutboundQueueSize());
-        assertEquals(localWanPublisherStats.getOutboundRecsSec(), deserialized.getOutboundRecsSec());
+        assertEquals(localWanPublisherStats.getTotalPublishLatency(), deserialized.getTotalPublishLatency());
     }
 
 }
diff --git a/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalWanStatsImplTest.java b/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalWanStatsImplTest.java
index c13de63..d92402e 100644
--- a/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalWanStatsImplTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/monitor/impl/LocalWanStatsImplTest.java
@@ -23,15 +23,13 @@ public class LocalWanStatsImplTest {
     public void testSerialization() {
         LocalWanPublisherStatsImpl tokyo = new LocalWanPublisherStatsImpl();
         tokyo.setConnected(true);
-        tokyo.setOutboundRecsSec(15);
+        tokyo.incrementPublishedEventCount(10);
         tokyo.setOutboundQueueSize(100);
-        tokyo.setOutboundLatencyMs(13);
 
         LocalWanPublisherStatsImpl singapore = new LocalWanPublisherStatsImpl();
         singapore.setConnected(true);
-        singapore.setOutboundRecsSec(25);
         singapore.setOutboundQueueSize(200);
-        singapore.setOutboundLatencyMs(15);
+        singapore.incrementPublishedEventCount(20);
 
         LocalWanStatsImpl localWanStats = new LocalWanStatsImpl();
         Map<String, LocalWanPublisherStats> localWanPublisherStatsMap = new HashMap<String, LocalWanPublisherStats>();
@@ -48,14 +46,14 @@ public class LocalWanStatsImplTest {
         LocalWanPublisherStats deserializedSingapore = deserialized.getLocalWanPublisherStats().get("singapore");
 
         assertEquals(tokyo.isConnected(), deserializedTokyo.isConnected());
-        assertEquals(tokyo.getOutboundLatencyMs(), deserializedTokyo.getOutboundLatencyMs());
+        assertEquals(tokyo.getTotalPublishedEventCount(), deserializedTokyo.getTotalPublishedEventCount());
         assertEquals(tokyo.getOutboundQueueSize(), deserializedTokyo.getOutboundQueueSize());
-        assertEquals(tokyo.getOutboundRecsSec(), deserializedTokyo.getOutboundRecsSec());
+        assertEquals(tokyo.getTotalPublishLatency(), deserializedTokyo.getTotalPublishLatency());
 
         assertEquals(singapore.isConnected(), deserializedSingapore.isConnected());
-        assertEquals(singapore.getOutboundLatencyMs(), deserializedSingapore.getOutboundLatencyMs());
+        assertEquals(singapore.getTotalPublishedEventCount(), deserializedSingapore.getTotalPublishedEventCount());
         assertEquals(singapore.getOutboundQueueSize(), deserializedSingapore.getOutboundQueueSize());
-        assertEquals(singapore.getOutboundRecsSec(), deserializedSingapore.getOutboundRecsSec());
+        assertEquals(singapore.getTotalPublishLatency(), deserializedSingapore.getTotalPublishLatency());
     }
 
 }
