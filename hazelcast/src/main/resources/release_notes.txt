
In this Release Notes document, you will find the new features, enhancements and fixes of the Hazelcast 3.6 release.
The numbers in the square brackets refer to the issue number in Hazelcastâ€™s GitHub repository. You can reach
to the full descriptions of the issues at https://github.com/hazelcast/hazelcast/issues/<issue number>.

1. New Features
This section provides the new features introduced with Hazelcast 3.6 release. 

- **High-Density Memory Store for Hazelcast Map**: With this release, Hazelcast Map data structure is now equipped with the High-Density Memory Store, previously implemented for Hazelcast JCache.

- **Hot Restart Store**: This new feature provides fast restarting of the Hazelcast clusters. This is achieved by storing the state of the cluster members to the disk.

- **Discovery Service Provider Interface (Discovery SPI)**: You can use this SPI to discover  Hazelcast instances on cloud environments provided by jclouds, Kubernetes and many more. The existing discovery mechanisms that Hazelcast provides (Multicast, TCP/IP and Amazon EC2) have been re-implemented on top of this new Discovery SPI.

- **Client Protocol**: This feature presents the Hazelcast's new open binary client protocol.

- **Client Cross Version Compatibility**: Now you can upgrade your Hazelcast clients independently from servers and other clients. 

- **Support for cloud providers through jclouds**: Hazelcast now supports deployments on all the well-known cloud providers through the jclouds open source library.

- **Ringbuffer and Reliable Topic in Hazelcast Clients**: The data structures Ringbuffer and Reliable Topic recently introduced by Hazelcast (with the release 3.5) are now implemented for Hazelcast Clients.

- **Cluster Quorum for Hazelcast JCache**: Cluster Quorum checks are now provided for Hazelcast JCache implementations, too.

- **Split Brain Syndrome handler for Hazelcast JCache**: Now Split Brain Syndrome is handled in JCache as it is taken care in Hazelcast Map. 

- **Partition Lost Listener for Hazelcast JCache**: You can listen to partition lost events fired in your Hazelcast JCache implementation.

- **Hazelcast Docker image**: Now you can run Hazelcast using our image in the Docker platform.

- **Lite Members**: With the introduction of Hazelcast Lite Members, you are able to specify certain members in your cluster so that they do not store data. You can use these lite members mostly for your task executions and listener registrations.

- **Indexing and querying of collections**: Hazelcast is now able to index and query the objects in a collection, e.g. queue, set and list.

- **Acquiring locks with a lease time**: Now, you can try to acquire locks with a lease time. 

- **Monitoring the WAN replication**: You can now monitor the state of your WAN replications using the Hazelcast Management Center.



2. Enhancements

This section lists the enhancements performed for Hazelcast 3.6 release.

- **Replicated Map improvements**: The implementation of Hazelcast replicated maps has been revisited.
- **Management Center improvements**: ???.
- **Paging Predicate improvements**: With the performed improvements, now random page accessing is supported.
- **Rule based query optimizations**: This improvement introduces a query optimizer based on static rewriting rules. The optimizer treats predicates as immutable and returns a modified copy when the optimized one is found.
- **WAN replication improvements**: ???.
- **Improvements on Hazelcast's OSGI support**: ???.


The following are the other improvements performed to solve the enhancement issues opened by the Hazelcast customers/team.

- Approximate `max-size` calculation should be removed for IMap eviction. [6463]
- `SpringAwareWebFilter` should have a constructor which takes properties as arguments. [6438]
- Client side and server side cache proxies handle `putAll` operation one by one. This is not efficient. Records for this operation should be grouped as per their partitions and should be sent and processed in batches. [6367]
- Not requested events should not be sent to `MapListener` [6349]
- Inconsistent and potentially buggy design in `BasicCompletableFuture`. [6080]
- Starting with "hazelcast-wm 3.3", OSGI Manifest Spring package imports should be optional. [6072]
 - The new client determines the partition ID for every invocation for data structures like queue and list where the partition ID is static. There is no need for this behavior. It should calculate the partition ID for once  when the proxy is created and continue to re-use it. [5848]
- `Map.Entry` supplied to Entry Processor is not Serializable any more. [5611]
- The configuration file `minimal-json` with the provided scope is not picked up by the *shade* plugin. [5543]
- In Spring configuration, when a boolean property is injected for *hazelcast* bean (`<hz:hazelcast:....</hz:hazelcast`)
a `SAXParse` exception is thrown. [5528]
- Currently, key/value pairs are deserialized prior to the execution of entry processor by default.  This leads to the need of domain object at the server side, even if entry processor never uses it. [5301]
- In Spring XML configuration, the attributes of `socket-options` should be of type `xs:string`. [4700]
- `ClientMembershipEvent` does not need to have the `member` field. [4282]
- Hazelcast has `lock` with lease time feature but does not support `tryLock` with lease time. [1564]




3. Fixes

*3.5 Fixes*

This section lists issues solved for **Hazelcast 3.5** release.

- Operation timeout mechanism is not working [#5468].
- `MapLoader` exception is not logged: Exception should be logged and propagated back to the client that triggered the loading of the map [#5430].
- Replicated Map documentation page does not mention that it is in the beta stage [#5424].
- The method `XAResource.rollback()` should not need the transaction to be in the prepared state when called from another member/client [#5401].
- The method `XAResource.end()` should not need to check `threadId` [#5400].
- The method `IList::remove()` should publish the event `REMOVED` [#5386].
- `IllegalStateException` with wrong partition is thrown when the method `IMap::getOperation()` is invoked [#5341].
- `WrongTarget` warnings appear in the log since the operations are not sent to the replicas when a map has no backups [#5324].
- When the method `finalizeCombine()` is used, Hazelcast throws `NullPointerException` [#5283].
- `WanBatchReplication` causes `OutOfMemoryException` when the default value for WAN Replication Batch Size (50) is used [#5280].
- When testing Hazelcast, it does not start as an OSGI bundle. After the OSGI package was refactored, the dynamic class loading of the Script engine was missed [#5274].
- XA Example from Section 11.3.5 in the Reference Manual broken after the latest XA Improvements are committed [#5273].
- XA Transaction throws `TransactionException` instead of an `XAException` on timeout [#5260].
- The test for unbounded return values runs forever with the new client implementation [#5230].
- The new client method `getAsync()` fails with a `NegativeArraySizeException` [#5229].
- The method `putTransient` actuated the MapStore unexpectedly in an environment with multiple instances [#5225].
- Changes made by the interceptor do not appear in the backup [#5211].
- The method `removeAttribute` will prevent any updates by the method `setAttribute` in the deferred write mode [#5186].
- Backward compatibility of eviction configuration for cache is broken since `CacheEvictionConfig` class was renamed to `EvictionConfig` for general usage [#5180].
- Value passed into `ICompletableFuture.onResponse()` is not deserialized [#5158].
- Map Eviction section in the Reference Manual needs more clarification [#5120].
- When host names are not registered in DNS or in `/etc/hosts` and the members are configured manually with IP addresses and while one node is running, a second node joins to the cluster 5 minutes after it started [#5072].
- The method `OperationService.asyncInvokeOnPartition()` sometimes fails [#5069].
- The `SlowOperationDTO.operation` shows only the class name, not the package. This can lead to ambiguity and the actual class cannot be tracked [#5041].
- There is no documentation comment for the `MessageListener` interface of ITopic [#5019].
- The method `InvocationFuture.isDone` returns `true` as soon as there is a response including `WAIT_RESPONSE`. However, `WAIT_RESPONSE` is an intermediate response, not a final one [#5002].
- The method `InvocationFuture.andThen` does not deal with the null response correctly [#5001].
- `CacheCreationTest` fails due to the multiple `TestHazelcastInstanceFactory` creations in the same test [#4987].
- When Spring dependency is upgraded to 4.1.x, an exception related to the `putIfAbsent` method is thrown [#4981].
- HazelcastCacheManager should offer a way to access the underlying cache manager [#4978].
- Hazelcast Client code allows to use the value *0* for the `connectionAttemptLimit` property which internally results in `int.maxValue`. However, the XSD of the Hazelcast Spring configuration requires it to be at least 1 [#4967].
- Updates from Entry Processor does not take `write-coalescing` into account [#4967].
- CachingProvider does not honor custom URI [#4943].
- Test for the method `getLocalExecutorStats()` fails spuriously [#4911].
- Missing documentation of network configuration for JCache [#4905].
- Slow operation detector throws a `NullPointerException` [#4855].
- Consider use of `System.nanoTime` in `sleepAtLeast` test code [#4835].
- When upgraded to 3.5-SNAPSHOT for testing, Hazelcast project gives a warning that mentions a missing configuration for `hazelcastmq.txn-topic` [#4790].
- `ClassNotFoundException` when using WAR classes with JCache API [#4775].
- When Hazelcast is installed using Maven in Windows environment, the test `XmlConfigImportVariableReplacementTest` fails [#4758].
- When a request cannot be executed due to a problem (connection error, etc.), if the operation redo is enabled, request is retried. Retried operations are offloaded to an executor, but after offloading, the user thread still tries to retry the request. This causes anomalies like operations being executed twice or operation responses being handled incorrectly [#4693].
- Client destroys all connections when a reconnection happens [#4692].
- The `size()` method for a replicated map should return `0` when the entry is removed [#4666].
- `NullPointerException` on the `CachePutBackupOperation` class [#4660].
- When removing keys from a MultiMap with a listener, the method `entryRemoved()` is called. In order to get the removed value, one must call the `event.getValue()` instead of `event.getOldValue()` [#4644].
- Unnecessary deserialization at the server side when using `Cache.get()` [#4632].
- Operation timeout exception during `IMap.loadAllKeys()` [#4618].
- There have been Hazelcast AWS exceptions after the version of AWS signer had changed (from v2 to v4) [#4571].
- In the declarative configuration; when a variable is used to specify the value of an element or attribute, Hazelcast ignores the strings that come before the variable [#4533].
- `LocalRegionCache` cleanup is working wrongly [#4445].
- Repeatable-read does not work in a transaction [#4414].
- Hazelcast instance name with `Hibernate` still creates multiple instances [#4374].
- In Hazelcast 3.3.4, `FinalizeJoinOperation` times out if the method `MapStore.loadAllKeys()` takes more than 5 seconds [#4348].
- JCache sync listener completion latch problems: Status of `ICompletableFuture` while waiting for completion latch in the cache must be checked [#4335].
- Classloader issue with `javax.cache.api` and Hazelcast 3.3.1 [#3792].
- Failed backup operation on transaction commit causes ""Nested transactions are not allowed!" warning [#3577].
- Hazelcast Client should not ignore the fact that the XML is for server and should not use default XML feature to connect to `localhost` [#3256].
- Owner connection `read()` forever [#3401].



